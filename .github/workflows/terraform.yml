name: ESOP Trading CI CD

on:
    pull_request:
        branches: [main]

jobs:
    terraform:
        runs-on: ubuntu-latest
        permissions:
            pull-requests: write
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        outputs:
            output1: ${{ steps.get-ip.outputs.ip }}
        steps:
            - uses: actions/checkout@v3
            - run: which terraform
            - name: Terraform Formatting
              id: fmt
              run: terraform fmt -check

            - name: Terraform Init
              id: init
              run: terraform init

            - name: Terraform Validate
              id: validate
              run: terraform validate -no-color

            - name: Terraform Plan
              id: plan
              if: github.event_name == 'pull_request'
              run: |
                  plan_output=$(terraform plan -no-color -input=false -var "key=${{ secrets.SSH_PRIVATE_KEY }}")
                  echo "plan_output<<EOF" >> $GITHUB_OUTPUT
                  echo "$plan_output" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT
              continue-on-error: true

            - name: Update Pull Request
              uses: actions/github-script@v6
              if: github.event_name == 'pull_request'
              env:
                  PLAN: "terraform\n${{ steps.plan.outputs.plan_output }}"
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                      #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                      #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
                      #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                      <details><summary>Show Plan</summary>
                      \`\`\`\n
                      ${process.env.PLAN}
                      \`\`\`
                      </details>
                      *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
                      github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: output
                      })
            - name: Terraform Plan Status
              if: steps.plan.outcome == 'failure'
              run: exit

            - name: Terraform Apply
              if: github.ref == 'refs/heads/main' && github.event_name == 'push'
              run: terraform apply -auto-approve -input=false -var="key=${{ secrets.SSH_PRIVATE_KEY }}"

            - name: Terraform output
              if: github.ref == 'refs/heads/main' && github.event_name == 'push'
              id: get-ip
              run: echo "ip=$(terraform output instance_public_ip | tr -d '"')" >> $GITHUB_OUTPUT
